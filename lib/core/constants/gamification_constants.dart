// lib/core/constants/gamification_constants.dart
// Constantes para sistema de gamifica√ß√£o - Fase 3 (Atualizado com detalhes)

/// Configura√ß√µes globais do sistema de gamifica√ß√£o
/// Esta classe centraliza todos os valores num√©ricos e de configura√ß√£o
/// relacionados √† progress√£o do jogador, economia e recompensas no jogo.
/// Isso facilita o ajuste e o balanceamento do jogo sem alterar a l√≥gica principal.
class GamificationConstants {
  // ================================================================================================
  // SISTEMA DE N√çVEIS E XP
  // ================================================================================================

  /// XP inicial que um usu√°rio possui ao criar uma conta.
  static const int initialXP = 0;

  /// N√≠vel inicial que um usu√°rio possui ao criar uma conta.
  static const int initialLevel = 1;

  /// XP base necess√°rio para subir do n√≠vel 1 para 2.
  /// Serve como o ponto de partida para a curva de XP.
  static const int baseXPRequired = 100;

  /// Fator de crescimento que determina o qu√£o rapidamente o XP necess√°rio
  /// para o pr√≥ximo n√≠vel aumenta. Um valor maior significa uma progress√£o
  /// de n√≠vel mais lenta em n√≠veis mais altos (progress√£o exponencial).
  static const double xpGrowthFactor = 1.5;

  /// N√≠vel m√°ximo que um jogador pode alcan√ßar no jogo.
  static const int maxLevel = 100;

  /// XP m√°ximo que um jogador pode ganhar em um √∫nico dia.
  /// Implementado como uma medida anti-farm para evitar abuso.
  static const int maxDailyXP = 1000;

  // ================================================================================================
  // ECONOMIA - COINS E GEMS
  // ================================================================================================

  /// Quantidade de moedas (coins) iniciais concedidas ao criar uma conta.
  static const int initialCoins = 200;

  /// Quantidade de gemas (gems) iniciais concedidas ao criar uma conta.
  /// Gemas geralmente s√£o a moeda premium.
  static const int initialGems = 20;

  /// M√°ximo de moedas que pode ser ganho por dia.
  static const int maxDailyCoins = 500;

  /// M√°ximo de gemas que pode ser ganho por semana.
  static const int maxWeeklyGems = 50;

  /// Taxa de convers√£o de gemas para moedas (ex: 1 gema = 10 moedas).
  static const int gemsToCoinsRate = 10;

  /// B√¥nus de moedas concedido por login di√°rio consecutivo.
  /// A chave √© o n√∫mero de dias de sequ√™ncia, e o valor √© a quantidade de coins.
  static const Map<int, int> dailyLoginBonus = {
    1: 10, // 1 dia de sequ√™ncia
    2: 15, // 2 dias de sequ√™ncia
    3: 20, // 3 dias de sequ√™ncia
    4: 25, // 4 dias de sequ√™ncia
    5: 30, // 5 dias de sequ√™ncia
    6: 35, // 6 dias de sequ√™ncia
    7: 50, // 7 dias de sequ√™ncia (pode ser um marco com b√¥nus maior)
  };

  // ================================================================================================
  // RECOMPENSAS POR N√çVEL
  // ================================================================================================

  /// Recompensas especiais concedidas ao jogador quando ele atinge um novo n√≠vel.
  /// A chave √© o n√≠vel, e o valor √© um mapa com os tipos e quantidades de recompensas.
  static const Map<int, Map<String, int>> levelUpRewards = {
    // N√≠veis iniciantes
    2: {'coins': 50, 'gems': 2},
    3: {'coins': 75, 'gems': 3},
    5: {'coins': 100, 'gems': 5},

    // N√≠veis intermedi√°rios
    10: {'coins': 200, 'gems': 10},
    15: {'coins': 300, 'gems': 15},
    20: {'coins': 500, 'gems': 25},

    // N√≠veis avan√ßados
    25: {'coins': 750, 'gems': 40},
    30: {'coins': 1000, 'gems': 50},
    40: {'coins': 1500, 'gems': 75},
    50: {'coins': 2500, 'gems': 100},

    // N√≠veis expert
    75: {'coins': 5000, 'gems': 200},
    100: {'coins': 10000, 'gems': 500},
  };

  // ================================================================================================
  // T√çTULOS E CONQUISTAS
  // ================================================================================================

  /// T√≠tulos especiais que s√£o desbloqueados em n√≠veis espec√≠ficos.
  /// A chave √© o n√≠vel, e o valor √© o nome do t√≠tulo.
  static const Map<int, String> levelTitles = {
    1: 'Novato',
    5: 'Explorador',
    10: 'Conectado',
    15: 'Socializador',
    20: 'Influente',
    25: 'Popular',
    30: 'Especialista',
    40: 'Mestre',
    50: 'Lenda',
    75: '√çcone',
    100: 'Deus das Conex√µes',
  };

  /// Conquistas especiais que os jogadores podem desbloquear ao realizar
  /// certas a√ß√µes ou marcos.
  /// A chave √© um ID √∫nico da conquista, e o valor cont√©m seus detalhes.
  static const Map<String, Map<String, dynamic>> achievements = {
    'first_connection': {
      'title': 'Primeira Conex√£o',
      'description': 'Fez sua primeira conex√£o real',
      'xp': 100,
      'coins': 50,
      'gems': 5,
      'icon': 'ü§ù',
    },
    'profile_complete': {
      'title': 'Perfil Completo',
      'description': 'Completou 100% do perfil',
      'xp': 75,
      'coins': 40,
      'gems': 3,
      'icon': '‚úÖ',
    },
    'mission_master': {
      'title': 'Mestre das Miss√µes',
      'description': 'Completou 50 miss√µes',
      'xp': 500,
      'coins': 250,
      'gems': 25,
      'icon': 'üèÜ',
    },
    'social_butterfly': {
      'title': 'Borboleta Social',
      'description': 'Tem 10 conex√µes ativas',
      'xp': 1000,
      'coins': 500,
      'gems': 50,
      'icon': 'ü¶ã',
    },
    'minigame_champion': {
      'title': 'Campe√£o dos Jogos',
      'description': 'Venceu 25 minijogos',
      'xp': 750,
      'coins': 375,
      'gems': 35,
      'icon': 'üéÆ',
    },
  };

  // ================================================================================================
  // MULTIPLICADORES E BONUS
  // ================================================================================================

  /// Multiplicador de XP concedido com base na sequ√™ncia de login di√°rio.
  /// A chave √© o n√∫mero de dias de sequ√™ncia, e o valor √© o multiplicador de XP.
  static const Map<int, double> loginStreakXPMultiplier = {
    3: 1.1, // +10% XP por 3 dias seguidos
    7: 1.2, // +20% XP por 1 semana
    14: 1.3, // +30% XP por 2 semanas
    30: 1.5, // +50% XP por 1 m√™s
  };

  /// Calcula um multiplicador de moedas com base no n√≠vel atual do usu√°rio.
  /// Isso incentiva a progress√£o de n√≠vel.
  static double getCoinsMultiplierByLevel(int level) {
    if (level < 10) return 1.0;
    if (level < 20) return 1.1;
    if (level < 30) return 1.2;
    if (level < 50) return 1.3;
    return 1.5; // Multiplicador m√°ximo
  }

  // ================================================================================================
  // LIMITES E PROTE√á√ïES ANTI-FARM
  // ================================================================================================

  /// Cooldowns em minutos para a√ß√µes espec√≠ficas que concedem XP.
  /// Isso previne que os usu√°rios "farmem" XP rapidamente.
  static const Map<String, int> actionCooldowns = {
    'profile_view': 1, // Visualizar perfil: 1 minuto
    'send_invite': 5, // Enviar convite: 5 minutos
    'complete_mission': 0, // Completar miss√£o: sem cooldown imediato
    'minigame_complete': 2, // Completar minijogo: 2 minutos
  };

  /// Limites di√°rios de XP que podem ser obtidos de a√ß√µes espec√≠ficas.
  static const Map<String, int> dailyXPLimits = {
    'profile_views': 150, // M√°ximo 150 XP/dia por visualiza√ß√µes de perfil
    'invites_sent': 300, // M√°ximo 300 XP/dia por envio de convites
    'minigames': 400, // M√°ximo 400 XP/dia por minijogos
  };

  // ================================================================================================
  // CONFIGURA√á√ïES DE NOTIFICA√á√ïES
  // ================================================================================================

  /// Configura√ß√µes para controlar quais notifica√ß√µes de gamifica√ß√£o s√£o exibidas.
  static const Map<String, bool> notificationSettings = {
    'level_up': true, // Notificar ao subir de n√≠vel
    'achievement_unlock': true, // Notificar ao desbloquear conquistas
    'daily_bonus': true, // Notificar sobre o b√¥nus di√°rio
    'mission_complete': true, // Notificar ao completar miss√µes
    'weekly_summary': true, // Resumo semanal de atividades/recompensas
  };

  // ================================================================================================
  // CORES E VISUAL
  // ================================================================================================

  /// Mapeamento de cores (valores hex) para diferentes elementos de gamifica√ß√£o.
  static const Map<String, int> gamificationColors = {
    'xp': 0xFF2196F3, // Azul para XP
    'coins': 0xFFFFD700, // Dourado para moedas
    'gems': 0xFF9C27B0, // Roxo para gemas
    'level': 0xFF4CAF50, // Verde para n√≠vel
    'achievement': 0xFFFF9800, // Laranja para conquistas
    'streak': 0xFFE91E63, // Rosa para sequ√™ncias
  };

  /// Mapeamento de √≠cones emoji para diferentes elementos de gamifica√ß√£o.
  static const Map<String, String> gamificationIcons = {
    'xp': '‚ö°',
    'coins': 'ü™ô',
    'gems': 'üíé',
    'level': 'üèÖ',
    'achievement': 'üèÜ',
    'streak': 'üî•',
    'mission': 'üéØ',
  };

  // ================================================================================================
  // F√ìRMULAS DE C√ÅLCULO
  // ================================================================================================

  /// Calcula o XP total necess√°rio para alcan√ßar um n√≠vel espec√≠fico.
  /// A f√≥rmula usa uma progress√£o exponencial baseada em `baseXPRequired` e `xpGrowthFactor`.
  static int calculateXPForLevel(int level) {
    if (level <= 1) return 0; // N√≠vel 1 exige 0 XP

    double totalXP = 0;
    // Soma o XP necess√°rio para cada n√≠vel at√© o n√≠vel desejado
    for (int i = 2; i <= level; i++) {
      totalXP += baseXPRequired * ((i - 1) * xpGrowthFactor);
    }
    return totalXP.round(); // Arredonda para o n√∫mero inteiro mais pr√≥ximo
  }

  /// Calcula o n√≠vel atual de um usu√°rio com base na sua quantidade total de XP.
  static int calculateLevelFromXP(int currentXP) {
    int level = 1;
    // Itera do n√≠vel 1 at√© o n√≠vel m√°ximo
    while (level < maxLevel) {
      // Calcula o XP necess√°rio para o pr√≥ximo n√≠vel
      int nextLevelXP = calculateXPForLevel(level + 1);
      // Se o XP atual for menor que o necess√°rio para o pr√≥ximo n√≠vel,
      // o n√≠vel atual √© o correto
      if (currentXP < nextLevelXP) break;
      level++; // Caso contr√°rio, avan√ßa para o pr√≥ximo n√≠vel
    }
    return level;
  }

  /// Calcula a quantidade de XP que falta para o usu√°rio alcan√ßar o pr√≥ximo n√≠vel.
  static int calculateXPToNextLevel(int currentXP) {
    int currentLevel = calculateLevelFromXP(currentXP);
    if (currentLevel >= maxLevel) return 0; // Se j√° est√° no n√≠vel m√°ximo

    int nextLevelXP = calculateXPForLevel(currentLevel + 1);
    return nextLevelXP - currentXP;
  }

  /// Calcula o progresso percentual do usu√°rio no n√≠vel atual.
  /// Retorna um valor entre 0.0 e 1.0.
  static double calculateLevelProgress(int currentXP) {
    int currentLevel = calculateLevelFromXP(currentXP);
    if (currentLevel >= maxLevel)
      return 1.0; // Se j√° est√° no n√≠vel m√°ximo, o progresso √© 100%

    int currentLevelXP = calculateXPForLevel(currentLevel);
    int nextLevelXP = calculateXPForLevel(currentLevel + 1);

    int levelRangeXP = nextLevelXP - currentLevelXP; // XP total para este n√≠vel
    int progressXP = currentXP - currentLevelXP; // XP ganho dentro deste n√≠vel

    // Evita divis√£o por zero se o levelRangeXP for 0 (caso improv√°vel)
    return levelRangeXP > 0 ? progressXP / levelRangeXP : 0.0;
  }

  /// Verifica se um usu√°rio subiu de n√≠vel comparando o XP antigo com o novo XP.
  static bool didLevelUp(int oldXP, int newXP) {
    return calculateLevelFromXP(oldXP) < calculateLevelFromXP(newXP);
  }

  /// Obt√©m o t√≠tulo do usu√°rio com base no seu n√≠vel.
  /// Retorna o t√≠tulo do maior n√≠vel que o usu√°rio j√° atingiu.
  static String getUserTitle(int level) {
    // Encontra o maior n√≠vel com t√≠tulo definido que o n√≠vel atual do usu√°rio atinge
    int effectiveLevel = 1;
    for (int lvl in levelTitles.keys) {
      if (level >= lvl) {
        effectiveLevel = lvl;
      }
    }
    return levelTitles[effectiveLevel] ?? 'Novato'; // Fallback para "Novato"
  }

  /// Obt√©m as recompensas associadas a um n√≠vel espec√≠fico.
  static Map<String, int>? getLevelUpRewards(int level) {
    return levelUpRewards[level];
  }

  /// Obt√©m o b√¥nus de moedas para o login di√°rio com base na sequ√™ncia de dias.
  static int getLoginStreakBonus(int streakDays) {
    return dailyLoginBonus[streakDays] ??
        0; // Retorna 0 se n√£o houver b√¥nus para aquela sequ√™ncia
  }
}
